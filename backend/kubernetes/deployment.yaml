apiVersion: apps/v1
kind: Deployment
metadata:
  name: webagent-backend
  namespace: default
  labels:
    app: webagent-backend
    version: "2.4.0"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: webagent-backend
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: webagent-backend
        version: "2.4.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: webagent-backend
        image: webagent/backend:2.4.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: webagent-secrets
              key: openai-api-key
        - name: TOGETHER_API_KEY
          valueFrom:
            secretKeyRef:
              name: webagent-secrets
              key: together-api-key
              optional: true
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: webagent-secrets
              key: jwt-secret
        - name: LANGSMITH_API_KEY
          valueFrom:
            secretKeyRef:
              name: webagent-secrets
              key: langsmith-api-key
              optional: true
        resources:
          limits:
            cpu: "1"
            memory: "1Gi"
          requests:
            cpu: "500m"
            memory: "512Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: config
          mountPath: /app/config
      volumes:
      - name: tmp
        emptyDir: {}
      - name: config
        configMap:
          name: webagent-config
---
apiVersion: v1
kind: Service
metadata:
  name: webagent-backend
  namespace: default
  labels:
    app: webagent-backend
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: webagent-backend
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: webagent-backend
  namespace: default
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - api.webagent.example.com
    secretName: webagent-tls
  rules:
  - host: api.webagent.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: webagent-backend
            port:
              name: http
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: webagent-config
  namespace: default
data:
  production.yaml: |
    app:
      name: "WebAgent Backend"
      version: "2.4.0"
      environment: "production"
      debug: false
      
    server:
      host: "0.0.0.0"
      port: 8000
      workers: 4
      
    security:
      rate_limit:
        enabled: true
        requests_per_minute: 60
        burst: 100
      request_size_limit: 10485760  # 10MB
      
    logging:
      level: "INFO"
      json_format: true
      
    llm:
      default_provider: "openai"
      providers:
        openai:
          model: "gpt-4o"
          temperature: 0.7
          max_tokens: 2048
        together:
          model: "llama-3.3-70b-instruct-turbo-free"
          temperature: 0.7
          max_tokens: 2048
          
    metrics:
      enabled: true
      path: "/metrics"
---
apiVersion: v1
kind: Secret
metadata:
  name: webagent-secrets
  namespace: default
type: Opaque
stringData:
  openai-api-key: "${OPENAI_API_KEY}"
  together-api-key: "${TOGETHER_API_KEY}"
  jwt-secret: "${JWT_SECRET}"
  langsmith-api-key: "${LANGSMITH_API_KEY}" 